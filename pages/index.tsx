import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { title } from "process";
import { useEffect, useState } from "react";
import { Hero } from "../components/home-page/hero";
import { Plans } from "../components/home-page/plans";
import { Movies } from "../components/movies";
import PeriodProvider from "../contexts/period";
import PlanProvider from "../contexts/plans";
import { HeroType } from "../models/interfaces/hero";
import { Movie } from "../models/interfaces/movie";
import { Plan } from "../models/interfaces/plans";
import connectMongoDb from "../models/services/mongodb/config";
import { getEnabledMovies } from "../utils/movie";

const Home = ({
  moviesList,
  hero,
}: {
  moviesList: Movie[];
  hero: HeroType;
}) => {
  const [plansList, setPlansList] = useState<Plan[] | null>(null);

  const getInitPlans = async () => {
    try {
      const response = await fetch(`/api/plans/2`);
      if (!response.ok) {
        console.log("getInitPlans response.ok");
        const text = await response.text();
        throw new Error(text);
      }
      const jsonData = await response.json();
      setPlansList(jsonData);
      return jsonData;
    } catch (error) {
      console.log("Something went wrong. getInitPlans", error);
    }
  };

  useEffect(() => {
    getInitPlans();
  }, []);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col gap-y-14">
        <PlanProvider>
          <PeriodProvider>
            <Hero price={hero.price} description={hero.description} />
            <Plans plans={plansList} />
            <Link href="/all-plans">Show all Plans</Link>
            <Movies movies={moviesList} />
          </PeriodProvider>
        </PlanProvider>
      </div>
    </div>
  );
};

const getAllMovies = async (db: any) => {
  try {
    const collection = db.collection("movies");
    const findResult: Movie[] = await collection.find({}).toArray();
    return findResult.map((elem) => ({
      id: elem.id,
      title: elem.title,
      img: elem.img,
      enable: elem.enable,
    }));
  } catch (error) {
    console.log(error);
    return error;
  }
};

const getHero = async (db: any) => {
  try {
    const collection = db.collection("hero");
    const findResult: HeroType = await collection.findOne();
    console.log("heroeeeea ", findResult);
    return { price: findResult.price, description: findResult.description };
  } catch (error) {
    console.log("Something went wrong. getHero", error);
    return error;
  }
};

export async function getStaticProps() {
  const db = await connectMongoDb();
  const allMovies: any = await getAllMovies(db);
  const hero = await getHero(db);
  console.log("el heroe ", hero);
  let formatedAllMovies: Movie[] = [];
  if (allMovies && allMovies?.length) {
    formatedAllMovies = allMovies;
  }
  const moviesFilter: Movie[] = getEnabledMovies(formatedAllMovies);
  return {
    props: {
      moviesList: moviesFilter,
      hero,
    },
    revalidate: 10,
  };
}

export default Home;
